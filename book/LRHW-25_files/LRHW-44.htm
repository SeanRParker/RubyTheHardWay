<!DOCTYPE html>
<!-- saved from url=(0046)https://learnrubythehardway.org/book/ex44.html -->
<html class=" js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  
  
  
  <title>Learn Ruby the Hard Way - Read for Free</title>

  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width,initial-scale=1">

  <link href="https://www.google-analytics.com/" rel="dns-prefetch">
  <link href="https://ajax.googleapis.com/" rel="dns-prefetch">

  <link href="./LRHW-44_files/css" rel="stylesheet" type="text/css">
  <link href="./LRHW-44_files/style.min.css" rel="stylesheet">
  <!-- http://www.socicon.com -->
  <link href="./LRHW-44_files/icons.css" rel="stylesheet">

  
<meta name="generator" content="Docutils 0.12: http://docutils.sourceforge.net/">
<title>Exercise 44: Inheritance Versus Composition</title>

<style>@media print {#ghostery-purple-box {display:none !important}}</style><style media="print" class="jx_ui_StyleSheet" __jx__id="___$_2" type="text/css">.zopim { display: none !important }</style></head>

<body class="baseline-grid-off book-site header--compressed" id="top" cz-shortcut-listen="true"><div class="zopim" __jx__id="___$_60 ___$_60" style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding: 0px; border: 0px; background: transparent; overflow: hidden; position: fixed; z-index: 16000002; width: 180px; height: 30px; right: 10px; bottom: 0px; display: none;"><iframe frameborder="0" src="./LRHW-44_files/saved_resource.html" style="background-color: transparent; vertical-align: text-bottom; position: relative; width: 100%; height: 100%; min-width: 100%; min-height: 100%; max-width: 100%; max-height: 100%; margin: 0px; overflow: hidden; display: block;"></iframe></div><div class="zopim" __jx__id="___$_4 ___$_4" style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; padding: 0px; border: 0px; background: transparent; overflow: hidden; position: fixed; z-index: 16000001; right: 15px; bottom: 0px; border-top-left-radius: 5px; border-top-right-radius: 5px; display: none; width: 350px; height: 450px; box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 3px 2px;"><iframe frameborder="0" src="./LRHW-44_files/saved_resource(1).html" style="background-color: transparent; vertical-align: text-bottom; position: relative; width: 100%; height: 100%; min-width: 100%; min-height: 100%; max-width: 100%; max-height: 100%; margin: 0px; overflow: hidden; display: block;"></iframe></div>


  
  
<div data-scrollmagic-pin-spacer="" class="scrollmagic-pin-spacer" style="top: auto; left: auto; bottom: auto; right: auto; margin: 0px; display: block; position: absolute; box-sizing: content-box; width: 100%; height: 107px;"><header class="header" role="banner" style="position: fixed; margin: auto; top: -40px; left: 0px; bottom: auto; right: auto; box-sizing: border-box;">
  <nav class="navbar navbar-full nav-brand-family">
    <div class="row middle-xs">
      <ul class="brand-links show-md col-xs-3 col-sm-10 bare">
        <li><a href="http://learncodethehardway.org/" class="waves-effect">Learn:</a></li>
        
        <li><a href="http://learncodethehardway.org/python/" class="waves-effect">Python</a></li>
        
        <li><a href="http://learncodethehardway.org/ruby/" class="waves-effect active">Ruby</a></li>
        
        <li><a href="http://learncodethehardway.org/more-python/" class="waves-effect">More Python</a></li>
        
        <li><a href="http://learncodethehardway.org/c/" class="waves-effect">C</a></li>
        
        <li><a href="http://learncodethehardway.org/sql/" class="waves-effect">SQL</a></li>
        
        <li><a href="http://learncodethehardway.org/javascript/" class="waves-effect">Javascript</a></li>
        
        <li><a href="http://learncodethehardway.org/unix/" class="waves-effect">Unix</a></li>
        
        <li><a href="http://learncodethehardway.org/regex/" class="waves-effect">RegEx</a></li>
        
        <li><a href="http://www.learndesignthehardway.com/" class="waves-effect">Design</a></li>
        
      </ul>
      <ul class="brand-links hide-md col-xs-3 col-sm-10 bare">
        <li><a href="http://learncodethehardway.org/" class="waves-effect">LCTHW</a></li>
      </ul>
      
      <ul class="site-meta col-xs-9 col-sm-2 end-xs bare">
        <li><a href="https://shop.learncodethehardway.org/access/reactivate/" class="waves-effect"><i class="icon icon-user"></i> Login</a></li>
      </ul>
      
    </div>
  </nav>
  
  <nav class="navbar navbar-full nav-main" role="navigation">
    <div class="row between-xs center-xs middle-xs bare">
      <div class="col-xs-4 start-xs bare">
        <a href="https://learnrubythehardway.org/book/ex44.html#" class="no-underline nav-trigger waves-effect" id="toc"><div class="transformer hamburcloser">
          <div class="bar bar-t"></div>
          <div class="bar bar-m-a"></div>
          <div class="bar bar-m-b"></div>
          <div class="bar bar-b"></div>
        </div><span class="nav-trigger_text show-sm-inline">Contents</span></a>
      </div>
      <div class="col-xs-4"><strong>&nbsp;</strong></div>
      <div class="col-xs-4 end-xs bare">
        <a href="https://helpthw.zendesk.com/hc/en-us" class="no-underline nav-trigger waves-effect" id="help"><div class="transformer questioncloser">
          <div class="icon-question-mark"></div>
        </div><span class="nav-trigger_text show-sm-inline">Help</span></a>
      </div>
    </div>
  </nav>
  
</header></div>




  <div class="masthead ruby-background" style="background-image: url(&#39;/images/pattern-ruby.svg&#39;)">
    <img src="./LRHW-44_files/logo-ruby.svg" alt="Learn Ruby The Hard Way" class="logo">
  </div>

  <div class="wrapper">
    <aside class="sidebar sidebar-left sidebar--fixed" role="complementary">
      <nav class="side-nav-container">
        <ol class="table-of-contents">
          <h3>Table of Contents</h3>
            <li><a href="https://learnrubythehardway.org/book/preface.html">Preface</a></li>
            <li><a href="https://learnrubythehardway.org/book/intro.html">The Hard Way Is Easier</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex0.html">Ex0: The Setup</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex1.html">Ex1: A Good First Program</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex2.html">Ex2: Comments And Pound Characters</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex3.html">Ex3: Numbers And Math</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex4.html">Ex4: Variables And Names</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex5.html">Ex5: More Variables And Printing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex6.html">Ex6: Strings And Text</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex7.html">Ex7: More Printing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex8.html">Ex8: Printing, Printing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex9.html">Ex9: Printing, Printing, Printing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex10.html">Ex10: What Was That?</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex11.html">Ex11: Asking Questions</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex12.html">Ex12: Prompting People</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex13.html">Ex13: Parameters, Unpacking, Variables</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex14.html">Ex14: Prompting And Passing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex15.html">Ex15: Reading Files</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex16.html">Ex16: Reading And Writing Files</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex17.html">Ex17: More Files</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex18.html">Ex18: Names, Variables, Code, Functions</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex19.html">Ex19: Functions And Variables</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex20.html">Ex20: Functions And Files</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex21.html">Ex21: Functions Can Return Something</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex22.html">Ex22: What Do You Know So Far?</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex23.html">Ex23: Read Some Code</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex24.html">Ex24: More Practice</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex25.html">Ex25: Even More Practice</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex26.html">Ex26: Congratulations, Take A Test!</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex27.html">Ex27: Memorizing Logic</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex28.html">Ex28: Boolean Practice</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex29.html">Ex29: What If</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex30.html">Ex30: Else And If</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex31.html">Ex31: Making Decisions</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex32.html">Ex32: Loops And Lists</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex33.html">Ex33: While Loops</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex34.html">Ex34: Accessing Elements Of Lists</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex35.html">Ex35: Branches and Functions</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex36.html">Ex36: Designing and Debugging</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex37.html">Ex37: Symbol Review</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex38.html">Ex38: Doing Things To Lists</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex39.html">Ex39: Dictionaries, Oh Lovely Dictionaries</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex40.html">Ex40: Modules, Classes, And Objects</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex41.html">Ex41: Learning To Speak Object Oriented</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex42.html">Ex42: Is-A, Has-A, Objects, and Classes</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex43.html">Ex43: Gothons From Planet Percal #25</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex44.html">Ex44: Inheritance Vs. Composition</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex45.html">Ex45: You Make A Game</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex46.html">Ex46: A Project Skeleton</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex47.html">Ex47: Automated Testing</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex48.html">Ex48: Advanced User Input</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex49.html">Ex49: Making Sentences</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex50.html">Ex50: Your First Website</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex51.html">Ex51: Getting Input From A Browser</a></li>
            <li><a href="https://learnrubythehardway.org/book/ex52.html">Ex52: The Start Of Your Web Game</a></li>
            <li><a href="https://learnrubythehardway.org/book/advice.html">Advice From An Old Programmer</a></li>
            <li><a href="https://learnrubythehardway.org/book/next.html">Next Steps</a></li>
            <li><a href="https://learnrubythehardway.org/book/appendixa.html">Appendix A: Command Line Crash Course</a></li>
        </ol>
        <ul class="site-links">
          <h3>Learn the Hard Way</h3>
          <li><a href="https://learnrubythehardway.org/book/ex44.html#" class="waves-effect"><i class="icon-information"></i> About LPTHW</a></li>
          <li><a href="https://learnrubythehardway.org/book/ex44.html#" class="waves-effect"><i class="icon-first-aid"></i> Help &amp; Support</a></li>
          <li><a href="https://learnrubythehardway.org/book/ex44.html#" class="waves-effect"><i class="icon-power-1"></i> Follow us on Twitter</a></li>
        </ul>
      </nav>
      <div class="colophon text-center">
        <div class="intro">
          <p class="bare-bottom" id="p0">
            The type for this book is set in 18px / 1.5
            <a href="https://www.google.com/fonts/specimen/Source+Serif+Pro">Adobe Serif</a>,
            <a href="https://www.google.com/fonts/specimen/Source+Sans+Pro">Sans</a>, and
            <a href="https://www.google.com/fonts/specimen/Source+Code+Pro">Code</a>.
          </p>
        </div>
        <div class="printers-mark">
          <div class="inscription">Docendo <i class="icon-repeat"></i> Discimus</div>
        </div>
      </div>
    </aside>

    <div class="overlay"></div>

    <main class="main ruby" role="main">
      <div class="main-container row center-xs">
    <div class="col-xs-11 col-sm-10 col-md-9 col-lg-8">

        <div class="content">
            <!--- RST STARTS -->
            <h1 class="title">Exercise 44: Inheritance Versus Composition</h1>
            <p id="p1">In the fairy tales about heroes defeating evil villains there's always a dark forest of some kind.  It could be a cave, a forest, another planet, just some place that everyone knows the hero shouldn't go.  Of course, shortly after the villain is introduced you find out, yes, the hero has to go to that stupid forest to kill the bad guy.  It seems the hero just keeps getting into situations that require him to risk his life in this evil forest.</p>
<p id="p2">You rarely read fairy tales about the heroes who are smart enough to just avoid the whole situation entirely.  You never hear a hero say, "Wait a minute, if I leave to make my fortunes on the high seas leaving Buttercup behind I could die and then she'd have to marry some ugly prince named Humperdink.  Humperdink!  I think I'll stay here and start a Farm Boy for Rent business."  If he did that there'd be no fire swamp, dying, reanimation, sword fights, giants, or any kind of story really.  Because of this, the forest in these stories seems to exist like a black hole that drags the hero in no matter what they do.</p>
<p id="p3">In object-oriented programming, Inheritance is the evil forest.  Experienced programmers know to avoid this evil because they know that deep inside the Dark Forest Inheritance is the Evil Queen Multiple Inheritance. She likes to eat software and programmers with her massive complexity teeth, chewing on the flesh of the fallen. But the forest is so powerful and so tempting that nearly every programmer has to go into it, and try to make it out alive with the Evil Queen's head before they can call themselves real programmers.  You just can't resist the Inheritance Forest's pull, so you go in.  After the adventure you learn to just stay out of that stupid forest and bring an army if you are ever forced to go in again.</p>
<p id="p4">This is basically a funny way to say that I'm going to teach you something you should use carefully called Inheritance.  Programmers who are currently in the forest battling the Queen will probably tell you that you have to go in.  They say this because they need your help since what they've created is probably too much for them to handle.  But you should always remember this:</p>
<p id="p5">Most of the uses of inheritance can be simplified or replaced with composition, and I'll show you how in this exercise.</p>
<div class="section" id="what-is-inheritance">
<h1>What is Inheritance?</h1>
<p id="p6">Inheritance is used to indicate that one class will get most or all of its features from a parent class.  This happens implicitly whenever you write <tt class="docutils literal">class Foo &lt; Bar</tt>, which says "Make a class Foo that inherits from Bar." When you do this, the language makes any action that you do on instances of <tt class="docutils literal">Foo</tt> also work as if they were done to an instance of <tt class="docutils literal">Bar</tt>.  Doing this lets you put common functionality in the <tt class="docutils literal">Bar</tt> class, then specialize that functionality in the <tt class="docutils literal">Foo</tt> class as needed.</p>
<p id="p7">When you are doing this kind of specialization, there are three ways that the parent and child classes can interact:</p>
<ol class="arabic simple">
<li>Actions on the child imply an action on the parent.</li>
<li>Actions on the child override the action on the parent.</li>
<li>Actions on the child alter the action on the parent.</li>
</ol>
<p id="p8">I will now demonstrate each of these in order and show you code for them.</p>
<div class="section" id="implicit-inheritance">
<h2>Implicit Inheritance</h2>
<p id="p9">First I will show you the implicit actions that happen when you define a function in the parent, but <em>not</em> in the child.</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44a.rb-idio.html-1"></a><span class="k">class</span> <span class="nc">Parent</span>
<a name="ruby--ex44a.rb-idio.html-2"></a>
<a name="ruby--ex44a.rb-idio.html-3"></a>  <span class="k">def</span> <span class="nf">implicit</span><span class="p">()</span>
<a name="ruby--ex44a.rb-idio.html-4"></a>    <span class="nb">puts</span> <span class="s2">"PARENT implicit()"</span>
<a name="ruby--ex44a.rb-idio.html-5"></a>  <span class="k">end</span>
<a name="ruby--ex44a.rb-idio.html-6"></a><span class="k">end</span>
<a name="ruby--ex44a.rb-idio.html-7"></a>
<a name="ruby--ex44a.rb-idio.html-8"></a><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
<a name="ruby--ex44a.rb-idio.html-9"></a><span class="k">end</span>
<a name="ruby--ex44a.rb-idio.html-10"></a>
<a name="ruby--ex44a.rb-idio.html-11"></a><span class="n">dad</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44a.rb-idio.html-12"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44a.rb-idio.html-13"></a>
<a name="ruby--ex44a.rb-idio.html-14"></a><span class="n">dad</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44a.rb-idio.html-15"></a><span class="n">son</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p10">The class <tt class="docutils literal">Child</tt> is an empty class that inherits all of its behavior from <tt class="docutils literal">Parent</tt>.  When you this code you get the following:</p>
<div class="highlight"><pre><span></span><a name="ruby--ex44a.sh-idio-shint-pyg.html-1"></a><span class="gp">$</span> ruby ex44a.rb
<a name="ruby--ex44a.sh-idio-shint-pyg.html-2"></a><span class="go">PARENT implicit()</span>
<a name="ruby--ex44a.sh-idio-shint-pyg.html-3"></a><span class="go">PARENT implicit()</span>
</pre></div><p id="p11">Notice how even though I'm calling <tt class="docutils literal">son.implicit()</tt> on line 16, and even though <tt class="docutils literal">Child</tt> does <em>not</em> have a <tt class="docutils literal">implicit</tt> function defined, it still works and it calls the one defined in <tt class="docutils literal">Parent</tt>.  This shows you that, if you put functions in a base class (i.e., <tt class="docutils literal">Parent</tt>) then all subclasses (i.e., <tt class="docutils literal">Child</tt>) will automatically get those features.  Very handy for repetitive code you need in many classes.</p>
</div>
<div class="section" id="override-explicitly">
<h2>Override Explicitly</h2>
<p id="p12">The problem with having functions called implicitly is sometimes you want the child to behave differently.  In this case you want to override the function in the child, effectively replacing the functionality.  To do this just define a function with the same name in <tt class="docutils literal">Child</tt>.  Here's an example:</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44b.rb-idio.html-1"></a><span class="k">class</span> <span class="nc">Parent</span>
<a name="ruby--ex44b.rb-idio.html-2"></a>
<a name="ruby--ex44b.rb-idio.html-3"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44b.rb-idio.html-4"></a>    <span class="nb">puts</span> <span class="s2">"PARENT override()"</span>
<a name="ruby--ex44b.rb-idio.html-5"></a>  <span class="k">end</span>
<a name="ruby--ex44b.rb-idio.html-6"></a><span class="k">end</span>
<a name="ruby--ex44b.rb-idio.html-7"></a>
<a name="ruby--ex44b.rb-idio.html-8"></a><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
<a name="ruby--ex44b.rb-idio.html-9"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44b.rb-idio.html-10"></a>    <span class="nb">puts</span> <span class="s2">"CHILD override()"</span>
<a name="ruby--ex44b.rb-idio.html-11"></a>  <span class="k">end</span>
<a name="ruby--ex44b.rb-idio.html-12"></a><span class="k">end</span>
<a name="ruby--ex44b.rb-idio.html-13"></a>
<a name="ruby--ex44b.rb-idio.html-14"></a><span class="n">dad</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44b.rb-idio.html-15"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44b.rb-idio.html-16"></a>
<a name="ruby--ex44b.rb-idio.html-17"></a><span class="n">dad</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
<a name="ruby--ex44b.rb-idio.html-18"></a><span class="n">son</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p13">In this example I have a function named <tt class="docutils literal">override</tt> in both classes, so let's see what happens when you run it.</p>
<div class="highlight"><pre><span></span><a name="ruby--ex44b.sh-idio-shint-pyg.html-1"></a><span class="gp">$</span> ruby ex44b.rb
<a name="ruby--ex44b.sh-idio-shint-pyg.html-2"></a><span class="go">PARENT override()</span>
<a name="ruby--ex44b.sh-idio-shint-pyg.html-3"></a><span class="go">CHILD override()</span>
</pre></div><p id="p14">As you can see, when line 14 runs, it runs the <tt class="docutils literal">Parent.override</tt> function because that variable (<tt class="docutils literal">dad</tt>) is a <tt class="docutils literal">Parent</tt>.  But when line 15 runs it prints out the <tt class="docutils literal">Child.override</tt> messages because <tt class="docutils literal">son</tt> is an instance of <tt class="docutils literal">Child</tt> and <tt class="docutils literal">Child</tt> overrides that function by defining its own version.</p>
<p id="p15">Take a break right now and try playing with these two concepts before continuing.</p>
</div>
<div class="section" id="alter-before-or-after">
<h2>Alter Before or After</h2>
<p id="p16">The third way to use inheritance is a special case of overriding where you want to alter the behavior before or after the <tt class="docutils literal">Parent</tt> class's version runs.  You first override the function just like in the last example, but then you use a Ruby built-in function named <tt class="docutils literal">super</tt> to get the <tt class="docutils literal">Parent</tt> version to call.  Here's the example of doing that so you can make sense of this description:</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44c.rb-idio.html-1"></a><span class="k">class</span> <span class="nc">Parent</span>
<a name="ruby--ex44c.rb-idio.html-2"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-3"></a>    <span class="nb">puts</span> <span class="s2">"PARENT altered()"</span>
<a name="ruby--ex44c.rb-idio.html-4"></a>  <span class="k">end</span>
<a name="ruby--ex44c.rb-idio.html-5"></a><span class="k">end</span>
<a name="ruby--ex44c.rb-idio.html-6"></a>
<a name="ruby--ex44c.rb-idio.html-7"></a><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
<a name="ruby--ex44c.rb-idio.html-8"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-9"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, BEFORE PARENT altered()"</span>
<a name="ruby--ex44c.rb-idio.html-10"></a>    <span class="k">super</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-11"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, AFTER PARENT altered()"</span>
<a name="ruby--ex44c.rb-idio.html-12"></a>  <span class="k">end</span>
<a name="ruby--ex44c.rb-idio.html-13"></a>
<a name="ruby--ex44c.rb-idio.html-14"></a><span class="k">end</span>
<a name="ruby--ex44c.rb-idio.html-15"></a>
<a name="ruby--ex44c.rb-idio.html-16"></a><span class="n">dad</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-17"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-18"></a>
<a name="ruby--ex44c.rb-idio.html-19"></a><span class="n">dad</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
<a name="ruby--ex44c.rb-idio.html-20"></a><span class="n">son</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p17">The important lines here are 9-11, where in the <tt class="docutils literal">Child</tt> I do the following when <tt class="docutils literal">son.altered()</tt> is called:</p>
<ol class="arabic simple">
<li>Because I've overridden <tt class="docutils literal">Parent.altered</tt> the <tt class="docutils literal">Child.altered</tt> version runs, and line 9 executes like you'd expect.</li>
<li>In this case I want to do a before and after so after line 9, I want to use <tt class="docutils literal">super</tt> to get the <tt class="docutils literal">Parent.altered</tt> version.</li>
<li>On line 10 I call <tt class="docutils literal">super()</tt>, which is aware of inheritance and will get the <tt class="docutils literal">Parent</tt> class for you.</li>
<li>At this point, the <tt class="docutils literal">Parent.altered</tt> version of the function runs, and that prints out the <tt class="docutils literal">Parent</tt> message.</li>
<li>Finally, this returns from the <tt class="docutils literal">Parent.altered</tt> and the <tt class="docutils literal">Child.altered</tt> function continues to print out the after message.</li>
</ol>
<p id="p18">If you run this, you should see this:</p>
<div class="highlight"><pre><span></span><a name="ruby--ex44c.sh-idio-shint-pyg.html-1"></a><span class="gp">$</span> ruby ex44c.rb
<a name="ruby--ex44c.sh-idio-shint-pyg.html-2"></a><span class="go">PARENT altered()</span>
<a name="ruby--ex44c.sh-idio-shint-pyg.html-3"></a><span class="go">CHILD, BEFORE PARENT altered()</span>
<a name="ruby--ex44c.sh-idio-shint-pyg.html-4"></a><span class="go">PARENT altered()</span>
<a name="ruby--ex44c.sh-idio-shint-pyg.html-5"></a><span class="go">CHILD, AFTER PARENT altered()</span>
</pre></div></div>
<div class="section" id="all-three-combined">
<h2>All Three Combined</h2>
<p id="p19">To demonstrate all of these, I have a final version that shows each kind of interaction from inheritance in one file:</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44d.rb-idio.html-1"></a><span class="k">class</span> <span class="nc">Parent</span>
<a name="ruby--ex44d.rb-idio.html-2"></a>
<a name="ruby--ex44d.rb-idio.html-3"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-4"></a>    <span class="nb">puts</span> <span class="s2">"PARENT override()"</span>
<a name="ruby--ex44d.rb-idio.html-5"></a>  <span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-6"></a>
<a name="ruby--ex44d.rb-idio.html-7"></a>  <span class="k">def</span> <span class="nf">implicit</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-8"></a>    <span class="nb">puts</span> <span class="s2">"PARENT implicit()"</span>
<a name="ruby--ex44d.rb-idio.html-9"></a>  <span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-10"></a>
<a name="ruby--ex44d.rb-idio.html-11"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-12"></a>    <span class="nb">puts</span> <span class="s2">"PARENT altered()"</span>
<a name="ruby--ex44d.rb-idio.html-13"></a>  <span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-14"></a><span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-15"></a>
<a name="ruby--ex44d.rb-idio.html-16"></a><span class="k">class</span> <span class="nc">Child</span> <span class="o">&lt;</span> <span class="no">Parent</span>
<a name="ruby--ex44d.rb-idio.html-17"></a>
<a name="ruby--ex44d.rb-idio.html-18"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-19"></a>    <span class="nb">puts</span> <span class="s2">"CHILD override()"</span>
<a name="ruby--ex44d.rb-idio.html-20"></a>  <span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-21"></a>
<a name="ruby--ex44d.rb-idio.html-22"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-23"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, BEFORE PARENT altered()"</span>
<a name="ruby--ex44d.rb-idio.html-24"></a>    <span class="k">super</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-25"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, AFTER PARENT altered()"</span>
<a name="ruby--ex44d.rb-idio.html-26"></a>  <span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-27"></a><span class="k">end</span>
<a name="ruby--ex44d.rb-idio.html-28"></a>
<a name="ruby--ex44d.rb-idio.html-29"></a><span class="n">dad</span> <span class="o">=</span> <span class="no">Parent</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-30"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-31"></a>
<a name="ruby--ex44d.rb-idio.html-32"></a><span class="n">dad</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-33"></a><span class="n">son</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-34"></a>
<a name="ruby--ex44d.rb-idio.html-35"></a><span class="n">dad</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-36"></a><span class="n">son</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-37"></a>
<a name="ruby--ex44d.rb-idio.html-38"></a><span class="n">dad</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
<a name="ruby--ex44d.rb-idio.html-39"></a><span class="n">son</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p20">Go through each line of this code, and write a comment explaining what that line does and whether it's an override or not.  Then run it and confirm you get what you expected:</p>
<div class="highlight"><pre><span></span><a name="ruby--ex44d.sh-idio-shint-pyg.html-1"></a><span class="gp">$</span> ruby ex44d.rb
<a name="ruby--ex44d.sh-idio-shint-pyg.html-2"></a><span class="go">PARENT implicit()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-3"></a><span class="go">PARENT implicit()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-4"></a><span class="go">PARENT override()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-5"></a><span class="go">CHILD override()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-6"></a><span class="go">PARENT altered()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-7"></a><span class="go">CHILD, BEFORE PARENT altered()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-8"></a><span class="go">PARENT altered()</span>
<a name="ruby--ex44d.sh-idio-shint-pyg.html-9"></a><span class="go">CHILD, AFTER PARENT altered()</span>
</pre></div></div>
<div class="section" id="using-super-with-initialize">
<h2>Using <tt class="docutils literal">super()</tt> with <tt class="docutils literal">initialize</tt></h2>
<p id="p21">The most common use of <tt class="docutils literal">super()</tt> is actually in <tt class="docutils literal">initialize</tt> functions in base classes.  This is usually the only place where you need to do some things in a child, then complete the initialization in the parent.  Here's a quick example of doing that in the <tt class="docutils literal">Child</tt> from these examples:</p>
<pre class="code ruby literal-block"><span class="keyword">class</span> <span class="name class">Child</span> <span class="operator">&lt;</span> <span class="name constant">Parent</span>
    <span class="keyword">def</span> <span class="name function">initialize</span><span class="punctuation">(</span><span class="name">stuff</span><span class="punctuation">)</span>
        <span class="name variable instance">@stuff</span> <span class="operator">=</span> <span class="name">stuff</span>
        <span class="keyword">super</span><span class="punctuation">()</span>
    <span class="keyword">end</span>
<span class="keyword">end</span>
</pre>
<p id="p22">This is the same as the <tt class="docutils literal">Child.altered</tt> example above, except I'm setting some variables in the <tt class="docutils literal">initialize</tt> before having the <tt class="docutils literal">Parent</tt> initialize with its <tt class="docutils literal">Parent.initialize</tt>.</p>
</div>
</div>
<div class="section" id="composition">
<h1>Composition</h1>
<p id="p23">Inheritance is useful, but another way to do the exact same thing is just to <em>use</em> other classes and modules, rather than rely on implicit inheritance.  If you look at the three ways to exploit inheritance, two of the three involve writing new code to replace or alter functionality.  This can easily be replicated by just calling functions in a module.  Here's an example of doing this:</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44e.rb-idio.html-1"></a><span class="k">class</span> <span class="nc">Other</span>
<a name="ruby--ex44e.rb-idio.html-2"></a>
<a name="ruby--ex44e.rb-idio.html-3"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-4"></a>    <span class="nb">puts</span> <span class="s2">"OTHER override()"</span>
<a name="ruby--ex44e.rb-idio.html-5"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-6"></a>
<a name="ruby--ex44e.rb-idio.html-7"></a>  <span class="k">def</span> <span class="nf">implicit</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-8"></a>    <span class="nb">puts</span> <span class="s2">"OTHER implicit()"</span>
<a name="ruby--ex44e.rb-idio.html-9"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-10"></a>
<a name="ruby--ex44e.rb-idio.html-11"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-12"></a>    <span class="nb">puts</span> <span class="s2">"OTHER altered()"</span>
<a name="ruby--ex44e.rb-idio.html-13"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-14"></a><span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-15"></a>
<a name="ruby--ex44e.rb-idio.html-16"></a><span class="k">class</span> <span class="nc">Child</span>
<a name="ruby--ex44e.rb-idio.html-17"></a>
<a name="ruby--ex44e.rb-idio.html-18"></a>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-19"></a>    <span class="vi">@other</span> <span class="o">=</span> <span class="no">Other</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-20"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-21"></a>
<a name="ruby--ex44e.rb-idio.html-22"></a>  <span class="k">def</span> <span class="nf">implicit</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-23"></a>    <span class="vi">@other</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-24"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-25"></a>
<a name="ruby--ex44e.rb-idio.html-26"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-27"></a>    <span class="nb">puts</span> <span class="s2">"CHILD override()"</span>
<a name="ruby--ex44e.rb-idio.html-28"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-29"></a>
<a name="ruby--ex44e.rb-idio.html-30"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-31"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, BEFORE OTHER altered()"</span>
<a name="ruby--ex44e.rb-idio.html-32"></a>    <span class="vi">@other</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-33"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, AFTER OTHER altered()"</span>
<a name="ruby--ex44e.rb-idio.html-34"></a>  <span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-35"></a><span class="k">end</span>
<a name="ruby--ex44e.rb-idio.html-36"></a>
<a name="ruby--ex44e.rb-idio.html-37"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-38"></a>
<a name="ruby--ex44e.rb-idio.html-39"></a><span class="n">son</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-40"></a><span class="n">son</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
<a name="ruby--ex44e.rb-idio.html-41"></a><span class="n">son</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p24">In this code I'm not using the name <tt class="docutils literal">Parent</tt>, since there is <em>not</em> a parent-child <tt class="docutils literal"><span class="pre">is-a</span></tt> relationship.  This is a <tt class="docutils literal"><span class="pre">has-a</span></tt> relationship, where <tt class="docutils literal">Child</tt> <tt class="docutils literal"><span class="pre">has-a</span></tt> <tt class="docutils literal">Other</tt> that it uses to get its work done. When I run this I get the following output:</p>
<div class="highlight"><pre><span></span><a name="ruby--ex44e.sh-idio-shint-pyg.html-1"></a><span class="gp">$</span> ruby ex44e.rb
<a name="ruby--ex44e.sh-idio-shint-pyg.html-2"></a><span class="go">OTHER implicit()</span>
<a name="ruby--ex44e.sh-idio-shint-pyg.html-3"></a><span class="go">CHILD override()</span>
<a name="ruby--ex44e.sh-idio-shint-pyg.html-4"></a><span class="go">CHILD, BEFORE OTHER altered()</span>
<a name="ruby--ex44e.sh-idio-shint-pyg.html-5"></a><span class="go">OTHER altered()</span>
<a name="ruby--ex44e.sh-idio-shint-pyg.html-6"></a><span class="go">CHILD, AFTER OTHER altered()</span>
</pre></div><p id="p25">You can see that most of the code in <tt class="docutils literal">Child</tt> and <tt class="docutils literal">Other</tt> is the same to accomplish the same thing.  The only difference is that I had to define a <tt class="docutils literal">Child.implicit</tt> function to do that one action.  I could then ask myself if I need this <tt class="docutils literal">Other</tt> to be a class, and could I just make it into a module named <tt class="docutils literal">other.rb</tt>?</p>
<p id="p26">Ruby has another way to do composition using modules and a concept called mixins.  You simply create a module with functions that are common to classes and then include them in your class similar to using a <tt class="docutils literal">require</tt>.  Here's this same composition example done using modules and mixins.</p>
<table class="highlighttable"><tbody><tr><td class="linenos"><div class="linenodiv"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></div></td><td class="code"><div class="highlight"><pre><span></span><a name="ruby--ex44f.rb-idio.html-1"></a><span class="k">module</span> <span class="nn">Other</span>
<a name="ruby--ex44f.rb-idio.html-2"></a>
<a name="ruby--ex44f.rb-idio.html-3"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-4"></a>    <span class="nb">puts</span> <span class="s2">"OTHER override()"</span>
<a name="ruby--ex44f.rb-idio.html-5"></a>  <span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-6"></a>
<a name="ruby--ex44f.rb-idio.html-7"></a>  <span class="k">def</span> <span class="nf">implicit</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-8"></a>    <span class="nb">puts</span> <span class="s2">"OTHER implicit()"</span>
<a name="ruby--ex44f.rb-idio.html-9"></a>  <span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-10"></a>
<a name="ruby--ex44f.rb-idio.html-11"></a>  <span class="k">def</span> <span class="nc">Other</span><span class="o">.</span><span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-12"></a>    <span class="nb">puts</span> <span class="s2">"OTHER altered()"</span>
<a name="ruby--ex44f.rb-idio.html-13"></a>  <span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-14"></a><span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-15"></a>
<a name="ruby--ex44f.rb-idio.html-16"></a><span class="k">class</span> <span class="nc">Child</span>
<a name="ruby--ex44f.rb-idio.html-17"></a>  <span class="kp">include</span> <span class="no">Other</span>
<a name="ruby--ex44f.rb-idio.html-18"></a>
<a name="ruby--ex44f.rb-idio.html-19"></a>  <span class="k">def</span> <span class="nf">override</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-20"></a>    <span class="nb">puts</span> <span class="s2">"CHILD override()"</span>
<a name="ruby--ex44f.rb-idio.html-21"></a>  <span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-22"></a>
<a name="ruby--ex44f.rb-idio.html-23"></a>  <span class="k">def</span> <span class="nf">altered</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-24"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, BEFORE OTHER altered()"</span>
<a name="ruby--ex44f.rb-idio.html-25"></a>    <span class="no">Other</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-26"></a>    <span class="nb">puts</span> <span class="s2">"CHILD, AFTER OTHER altered()"</span>
<a name="ruby--ex44f.rb-idio.html-27"></a>  <span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-28"></a><span class="k">end</span>
<a name="ruby--ex44f.rb-idio.html-29"></a>
<a name="ruby--ex44f.rb-idio.html-30"></a><span class="n">son</span> <span class="o">=</span> <span class="no">Child</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-31"></a>
<a name="ruby--ex44f.rb-idio.html-32"></a><span class="n">son</span><span class="o">.</span><span class="n">implicit</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-33"></a><span class="n">son</span><span class="o">.</span><span class="n">override</span><span class="p">()</span>
<a name="ruby--ex44f.rb-idio.html-34"></a><span class="n">son</span><span class="o">.</span><span class="n">altered</span><span class="p">()</span>
</pre></div>
</td></tr></tbody></table><p id="p27">This is similar to the previous composition example. Mixins are much more powerful and an advanced topic I won't cover in this book.</p>
</div>
<div class="section" id="when-to-use-inheritance-or-composition">
<h1>When to Use Inheritance or Composition</h1>
<p id="p28">The question of "inheritance versus composition" comes down to an attempt to solve the problem of reusable code.  You don't want to have duplicated code all over your software, since that's not clean and efficient.  Inheritance solves this problem by creating a mechanism for you to have implied features in base classes.  Composition solves this by giving you modules and the ability to call functions in other classes.</p>
<p id="p29">If both solutions solve the problem of reuse, then which one is appropriate in which situations?  The answer is incredibly subjective, but I'll give you my three guidelines for when to do which:</p>
<ol class="arabic simple">
<li>Avoid something called "meta-programming" at all costs, as it is too complex to be useful reliably.  If you're stuck with it, then be prepared to know the class hierarchy and spend time determining where everything is coming from.</li>
<li>Use composition to package up code into modules that are used in many different unrelated places and situations.</li>
<li>Use inheritance only when there are clearly related reusable pieces of code that fit under a single common concept or if you have to because of something you're using.</li>
</ol>
<p id="p30">Do not be a slave to these rules.  The thing to remember about object-oriented programming is that it is entirely a social convention programmers have created to package and share code.  Because it's a social convention, but one that's codified in Ruby, you may be forced to avoid these rules because of the people you work with.  In that case, find out how they use things and then just adapt to the situation.</p>
</div>
<div class="section" id="study-drills">
<h1>Study Drills</h1>
<p id="p31">There is only one Study Drill for this exercise because it is a big exercise.  Go and read <a class="reference external" href="https://github.com/bbatsov/ruby-style-guide">https://github.com/bbatsov/ruby-style-guide</a> and start trying to use it in your code.  You'll notice that some of it is different from what you've been learning in this book, but now you should be able to understand their recommendations and use them in your own code.  The rest of the code in this book may or may not follow these guidelines depending on if it makes the code more confusing.  I suggest you also do this, as comprehension is more important than impressing everyone with you knowledge of esoteric style rules.</p>
</div>
<div class="section" id="common-student-questions">
<h1>Common Student Questions</h1>
<dl class="docutils">
<dt>How do I get better at solving problems that I haven't seen before?</dt>
<dd>The only way to get better at solving problems is to solve as many problems as you can <em>by yourself</em>.  Typically people hit a difficult problem and then rush out to find an answer.  This is fine when you have to get things done, but if you have the time to solve it yourself, then take that time.  Stop and bang your head against the problem for as long as possible, trying every possible thing, until you solve it or give up.  After that the answers you find will be more satisfying and you'll eventually get better at solving problems.</dd>
<dt>Aren't objects just copies of classes?</dt>
<dd>In some languages (like JavaScript) that is true. These are called prototype languages and there are not many differences between objects and classes other than usage.  In Ruby, however, classes act as templates that "mint" new objects, similar to how coins were minted using a die (template).</dd>
</dl>
</div>
            <!-- RST ENDS -->
        </div>

<div class="row between-xs center-xs middle-xs bare" id="notice" style="background-color: #eee">
    <div class="col-xs-11 col-sm-10 col-md-9 col-lg-8">
        <h1>Learn Python 3.6 Is Coming Soon</h1>
        <p>I'm currently upgrading <a href="http://bit.ly/lpthwbook">Learn Python The Hard Way</a> to Python 3.6 and everyone who buys the current version of <a href="http://bit.ly/lpthwbook">Learn Python The Hard Way</a> will get a <em>free upgrade</em>.  You can get 30% off if you <a href="http://bit.ly/buypython">buy it now with coupon code PYTHON36</a>.  <em>Offer only available for a limited time.</em></p>

    </div>
</div>
    </div>

      <div class="row center-xs" id="buy">
    <div class="text-center col-xs-10 col-sm-5 col-md-4">
      <h2 class="section-title__small">Buy DRM-Free</h2>
      <p id="p32">
        When you buy directly from the author, Zed A. Shaw, you'll get a professional
        quality PDF and  hours of HD Video, all DRM-free and yours to download
        and use as you see fit.
      </p>

      <p class="price-block" id="p33">
      <span class="currency"><span class="prefix">$</span>29.<span class="suffix">99</span></span>
      </p>

      <a href="https://shop.learncodethehardway.org/access/buy/5/" class="btn btn-primary btn-full">Buy Directly From The Author</a>
      
      <p class="text-left btn-subtext" id="p34">
        <small>Or, you can <a href="https://learnrubythehardway.org/book/">read Learn Ruby the Hard Way for free</a> right here, video lectures not included.</small>
      </p>
      
    </div>
    <div class="text-center col-xs-10 col-sm-5 col-md-4 col-sm-offset-1">
      
      <h2 class="section-title__small">Other Buying Options</h2>
      <a href="http://bit.ly/amznlrthw" class="btn btn-secondary btn-full">Buy on Amazon</a>
      <a href="http://bit.ly/informitlrthw" class="btn btn-secondary btn-full">Buy a hard copy from the Publisher</a>
      <a href="http://bit.ly/bnlrthw" class="btn btn-secondary btn-full">Buy a hard copy from Barnes &amp; Noble</a>
      
    </div>
  </div>

  <div class="row center-xs" id="video_holder" style="display: none">
      <div class="col-xs">
          <div data-paydiv_product="5" id="paydiv"></div>
    </div>
  </div>




</div>

    </main>

  </div>

  <div class="row dark bottom-nav">
    <div class="col-xs text-left">
      <a href="https://learnrubythehardway.org/book/ex43.html" class="prev" id="prev_link"><i class="icon-arrow-67"></i> <i class="icon icon-arrow-left"></i> Previous <span class="hide-xs show-sm-inline">Lesson</span></a>
    </div>
    <div class="col-xs text-right"><a href="https://learnrubythehardway.org/book/ex45.html" class="next" id="next_link">Next <span class="hide-xs show-sm-inline">Lesson</span> <i class="icon icon-arrow-right"></i></a>
      </div>
    </div>
  

<footer class="footer">
  <div class="row center-xs">

  <div class="col-xs-11 col-sm-6 col-md-5 col-lg-5">
    <ul class="nav nav-inline">
      <li><h4><a href="https://learnrubythehardway.org/">Home</a></h4></li>
      <li><h4><a href="https://learncodethehardway.org/about/">About</a></h4></li>
      <li><h4><a href="https://learncodethehardway.org/contact/">Contact</a></h4></li>
    </ul>
    <div class="copyright text-left">
      <small class="text-muted">© 2016 Zed A. Shaw</small>
    </div>
  </div>
  <div class="col-xs-11 col-sm-4 col-md-4 col-lg-3">
    <div class="social-media">
      <div class="classy-container">
        <a href="https://twitter.com/lzsthw" class="socicon-twitter"></a>
      </div>
    </div>
  </div>
</div>

</footer>
<script async="" charset="utf-8" src="./LRHW-44_files/saved_resource" type="text/javascript"></script><script src="./LRHW-44_files/scripts.min.js"></script>

<script src="./LRHW-44_files/jquery.js"></script>
<script src="./LRHW-44_files/index.js"></script>
<script src="./LRHW-44_files/jzed.js"></script>
<script src="./LRHW-44_files/video.js"></script>
<link rel="stylesheet" href="./LRHW-44_files/video-js.css">
<script src="./LRHW-44_files/paydiv.js"></script>
<script src="./LRHW-44_files/app.js"></script>
<script src="./LRHW-44_files/littools.js"></script>
<!-- Start of helpthw Zendesk Widget script -->
<iframe src="javascript:false" title="" style="display: none;" src="./LRHW-44_files/saved_resource(2).html"></iframe><script>/*<![CDATA[*/window.zEmbed||function(e,t){var n,o,d,i,s,a=[],r=document.createElement("iframe");window.zEmbed=function(){a.push(arguments)},window.zE=window.zE||window.zEmbed,r.src="javascript:false",r.title="",r.role="presentation",(r.frameElement||r).style.cssText="display: none",d=document.getElementsByTagName("script"),d=d[d.length-1],d.parentNode.insertBefore(r,d),i=r.contentWindow,s=i.document;try{o=s}catch(e){n=document.domain,r.src='javascript:var d=document.open();d.domain="'+n+'";void(0);',o=s}o.open()._l=function(){var o=this.createElement("script");n&&(this.domain=n),o.id="js-iframe-async",o.src=e,this.t=+new Date,this.zendeskHost=t,this.zEQueue=a,this.body.appendChild(o)},o.write('<body onload="document._l();">'),o.close()}("https://assets.zendesk.com/embeddable_framework/main.js","helpthw.zendesk.com");
/*]]>*/</script>
<!-- End of helpthw Zendesk Widget script -->



<div id="ghostery-purple-box" class="ghostery-bottom ghostery-right ghostery-collapsed"><div id="ghostery-box"><div id="ghostery-count" style="background: none; color: rgb(255, 255, 255);">2</div><div id="ghostery-pb-icons-container"><span id="ghostery-breaking-tracker" class="ghostery-pb-tracker" title="Broken Page Trackers" style="background: url(&quot;chrome-extension://mlomiejdfkolichcflejclcbmpeaniij/app/images/purple_box/breaking-icon.svg&quot;); opacity: 0.5;"></span><span id="ghostery-slow-tracker" class="ghostery-pb-tracker" title="Slow Trackers" style="background: url(&quot;chrome-extension://mlomiejdfkolichcflejclcbmpeaniij/app/images/purple_box/slow-icon.svg&quot;); opacity: 0.5;"></span><span id="ghostery-non-secure-tracker" class="ghostery-pb-tracker" title="Non-secure Trackers" style="background: url(&quot;chrome-extension://mlomiejdfkolichcflejclcbmpeaniij/app/images/purple_box/non-secure-icon.svg&quot;); opacity: 0.5;"></span></div><div id="ghostery-title">Trackers</div><div id="ghostery-minimize"><span id="ghostery-minimize-icon"></span></div><span id="ghostery-close" style="background: url(&quot;chrome-extension://mlomiejdfkolichcflejclcbmpeaniij/app/images/purple_box/collapse.svg&quot;);"></span></div><div id="ghostery-pb-background"><div id="ghostery-trackerList"><div class="ghostery-trackerContainer"><span id="ghostery-no-tracker" class="ghostery-pb-tracker-list"></span><span class="ghostery-tracker">Zendesk</span></div><div class="ghostery-trackerContainer"><span id="ghostery-no-tracker" class="ghostery-pb-tracker-list"></span><span class="ghostery-tracker">Zopim</span></div></div></div></div><div><iframe data-reactroot="" id="ticketSubmissionForm" class="zEWidget-ticketSubmissionForm" style="border: none; background: transparent; z-index: 999999; transform: translateZ(0px); position: fixed; opacity: 0; right: 0px; bottom: 0px; width: 357px; margin-left: 15px; margin-right: 15px; margin-top: 0px; height: 476px; transition-property: none; transition-timing-function: unset; top: -9999px;" src="./LRHW-44_files/saved_resource(3).html"></iframe></div><script>
    (function(d,s){var z=$zopim,$=z.s= d.createElement(s),e=d.getElementsByTagName(s)[0];
    $.async=!0;$.setAttribute('charset','utf-8');
    $.src='https://v2.zopim.com/?43bhyAkp3pYCNphTsHWmY6JMyxmxLXDu';
    z.t=+new Date;$. type='text/javascript';e.parentNode.insertBefore($,e)})(document,'script');
  </script><div><iframe data-reactroot="" id="launcher" class="zEWidget-launcher zEWidget-launcher--active" style="border: none; background: transparent; z-index: 999998; transform: translateZ(0px); position: fixed; opacity: 1; right: 0px; bottom: 0px; width: 112px; height: 47px; margin: 10px 20px; transition-property: all; transition-timing-function: ease-out; transition-duration: 300ms;" src="./LRHW-44_files/saved_resource(4).html"></iframe></div><div><iframe data-reactroot="" id="nps" class="zEWidget-nps" style="border: none; background: transparent; z-index: 2147483647; transform: translateZ(0px); position: fixed; opacity: 0; right: 0px; bottom: 0px; left: 50%; margin-left: -310px; margin-bottom: 15px; width: 640px; margin-top: 0px; height: 177px; transition-property: none; transition-timing-function: unset; top: -9999px;" src="./LRHW-44_files/saved_resource(5).html"></iframe></div><div><iframe data-reactroot="" id="ipm" class="zEWidget-ipm" style="border: none; background: transparent; z-index: 2147483647; transform: translateZ(0px); position: fixed; opacity: 0; right: 0px; top: -230px; margin-right: 15px; margin-top: 0px; height: 180px; width: 395px; transition-property: none; transition-timing-function: unset;" src="./LRHW-44_files/saved_resource(6).html"></iframe></div><style></style></body></html>